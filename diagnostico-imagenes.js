// Script de diagn√≥stico para verificar carga de im√°genes
console.log('üîç Iniciando diagn√≥stico de carga de im√°genes...');

function diagnosticarImagenes() {
    const imagenes = document.querySelectorAll('img');
    const results = [];
    
    console.log(`üìä Encontradas ${imagenes.length} im√°genes en la p√°gina`);
    
    imagenes.forEach((img, index) => {
        const resultado = {
            index: index + 1,
            src: img.src,
            alt: img.alt,
            naturalWidth: img.naturalWidth,
            naturalHeight: img.naturalHeight,
            complete: img.complete,
            loading: img.loading || 'auto'
        };
        
        if (img.complete && img.naturalWidth > 0) {
            resultado.status = '‚úÖ Cargada correctamente';
            resultado.size = `${img.naturalWidth}x${img.naturalHeight}`;
        } else if (img.complete && img.naturalWidth === 0) {
            resultado.status = '‚ùå Error al cargar';
            resultado.error = 'Imagen no encontrada o corrupta';
        } else {
            resultado.status = '‚è≥ Cargando...';
        }
        
        results.push(resultado);
    });
    
    console.table(results);
    
    // Verificar tambi√©n pictures
    const pictures = document.querySelectorAll('picture');
    if (pictures.length > 0) {
        console.log(`üñºÔ∏è Encontrados ${pictures.length} elementos picture`);
        
        pictures.forEach((picture, index) => {
            const sources = picture.querySelectorAll('source');
            const img = picture.querySelector('img');
            
            console.log(`üì∑ Picture ${index + 1}:`);
            console.log(`   - Sources: ${sources.length}`);
            sources.forEach((source, sIndex) => {
                console.log(`     ${sIndex + 1}. ${source.srcset} (${source.type})`);
            });
            console.log(`   - Fallback: ${img ? img.src : 'No encontrado'}`);
            console.log(`   - Estado: ${img && img.complete ? '‚úÖ' : '‚è≥'}`);
        });
    }
    
    // Verificar carga de audio
    const audios = document.querySelectorAll('audio');
    if (audios.length > 0) {
        console.log(`üéµ Encontrados ${audios.length} elementos de audio`);
        
        audios.forEach((audio, index) => {
            const sources = audio.querySelectorAll('source');
            console.log(`üéº Audio ${index + 1}:`);
            sources.forEach((source, sIndex) => {
                console.log(`   ${sIndex + 1}. ${source.src} (${source.type})`);
            });
            console.log(`   - Ready State: ${audio.readyState}/4`);
            console.log(`   - Network State: ${audio.networkState}/3`);
        });
    }
    
    return results;
}

// Ejecutar diagn√≥stico cuando todo est√© cargado
window.addEventListener('load', () => {
    setTimeout(() => {
        const results = diagnosticarImagenes();
        
        const errores = results.filter(r => r.status.includes('‚ùå'));
        const cargando = results.filter(r => r.status.includes('‚è≥'));
        const exitosas = results.filter(r => r.status.includes('‚úÖ'));
        
        console.log(`\nüìã RESUMEN DEL DIAGN√ìSTICO:`);
        console.log(`‚úÖ Im√°genes cargadas: ${exitosas.length}`);
        console.log(`‚ùå Im√°genes con error: ${errores.length}`);
        console.log(`‚è≥ Im√°genes cargando: ${cargando.length}`);
        
        if (errores.length > 0) {
            console.log(`\nüö® ERRORES ENCONTRADOS:`);
            errores.forEach(error => {
                console.log(`   ‚Ä¢ ${error.src} - ${error.error}`);
            });
        }
        
        if (cargando.length > 0) {
            console.log(`\n‚è≥ IM√ÅGENES A√öN CARGANDO:`);
            cargando.forEach(loading => {
                console.log(`   ‚Ä¢ ${loading.src}`);
            });
            
            // Verificar de nuevo en 5 segundos
            setTimeout(() => {
                console.log('\nüîÑ Verificaci√≥n adicional despu√©s de 5 segundos...');
                diagnosticarImagenes();
            }, 5000);
        }
        
        // Verificar soporte de formatos modernos
        console.log(`\nüé® SOPORTE DE FORMATOS:`);
        console.log(`WebP: ${window.imageOptimization?.supportsWebP ? '‚úÖ' : '‚ùå'}`);
        console.log(`AVIF: ${window.imageOptimization?.supportsAVIF ? '‚úÖ' : '‚ùå'}`);
        
    }, 2000); // Esperar 2 segundos para que las im√°genes tengan tiempo de cargar
});

// Funci√≥n para probar carga manual de imagen
window.testImageLoad = function(src) {
    console.log(`üß™ Probando carga de: ${src}`);
    
    const img = new Image();
    img.onload = () => {
        console.log(`‚úÖ Imagen cargada exitosamente: ${src}`);
        console.log(`   Dimensiones: ${img.naturalWidth}x${img.naturalHeight}`);
    };
    img.onerror = (error) => {
        console.log(`‚ùå Error cargando imagen: ${src}`);
        console.log(`   Error:`, error);
    };
    img.src = src;
};

// Funci√≥n para probar todos los formatos de una imagen
window.testAllFormats = function(baseName) {
    const formats = ['avif', 'webp', 'jpg', 'png'];
    
    console.log(`üî¨ Probando todos los formatos para: ${baseName}`);
    
    formats.forEach(format => {
        const src = `./assets/images/${baseName}.${format}`;
        testImageLoad(src);
    });
};

console.log('‚ú® Diagn√≥stico de im√°genes listo!');
console.log('üí° Comandos disponibles:');
console.log('   ‚Ä¢ diagnosticarImagenes() - Ejecutar diagn√≥stico completo');
console.log('   ‚Ä¢ testImageLoad("ruta/imagen.jpg") - Probar carga de imagen espec√≠fica');
console.log('   ‚Ä¢ testAllFormats("Logo MCm") - Probar todos los formatos de una imagen');
